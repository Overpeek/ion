use crate::syntax::{*, lexer::Token};

//

grammar<'err>(errors: &'err mut Vec<String>);

extern {
    type Location = usize;
    type Error = String;
    
    enum Token {
        "fn" => Token::KeywordFn,
        "let" => Token::KeywordLet,
        "if" => Token::KeywordIf,
        "for" => Token::KeywordFor,
        "in" => Token::KeywordIn,
        "return" => Token::KeywordReturn,

        "i32" => Token::KeywordInt,
        "f32" => Token::KeywordFloat,
        "bool" => Token::KeywordBool,
        "str" => Token::KeywordStr,
        "none" => Token::KeywordNone,

        "ident" => Token::Ident(<arcstr::Substr>),
        "lit_int" => Token::Int(<i64>),
        "lit_float" => Token::Float(<f64>),
        "lit_bool" => Token::Bool(<bool>),
        "lit_str" => Token::Str(<arcstr::Substr>),

        "(" => Token::Lparen,
        ")" => Token::Rparen,
        "{" => Token::Lbrace,
        "}" => Token::Rbrace,
        "[" => Token::Lbracket,
        "]" => Token::Rbracket,
        "," => Token::Comma,
        ";" => Token::Semi,
        ":" => Token::Colon,

        ".." => Token::RangeOpen,
        "..=" => Token::RangeClosed,

        "+" => Token::OpAdd,
        "-" => Token::OpSub,
        "*" => Token::OpMul,
        "/" => Token::OpDiv,
        "%" => Token::OpMod,
        "<" => Token::OpLt,
        "<=" => Token::OpLe,
        "==" => Token::OpEq,
        ">=" => Token::OpGe,
        ">" => Token::OpGt,

        "=" => Token::Assign,
        "+=" => Token::AssignAdd,
        "-=" => Token::AssignSub,
        "*=" => Token::AssignMul,
        "/=" => Token::AssignDiv,
        "%=" => Token::AssignMod,
    }
}

//

pub Module: Module = {
    ";"* <items: (<Item> ";"+)*> => Module {
        src_files: vec![],
        items
    },
};

pub Item: Item = {
    FnDef => Item::FnDef(<>),
};

pub FnDef: FnDef = {
    <proto:FnProto> <block:Block> => FnDef {
        proto,
        block,
    },
};

pub FnProto: FnProto = {
    "fn" <id:"ident"> "(" <params:ParamList> ")" <ty: (":" <Type>)> => FnProto {
        id,
        params,
        ty,
    },
};

pub ParamList: ParamList = {
    Separated<Param, ","> => ParamList(<>),
};

pub Param: Param = {
    <id:"ident"> <ty: (":" <Type>)> => Param {
        id,
        ty,
    },
};

pub Type: Type = {
    "i32" => Type::I32,
    "f32" => Type::F32,
    "none" => Type::None,
};

pub Block: Block = {
    "{" <Chunk> "}",
};

pub Chunk: Block = {
    <stmts: (<Stmt>)*> => Block {
        stmts
    }
};

pub Stmt: Stmt = {
    <SemiStmt> ";" => <>,
    <NoSemiStmt> => <>,

    ";" => Stmt::Semi,
};

SemiStmt: Stmt = {
    Return => Stmt::Return(<>),
    Let => Stmt::Let(<>),
    Assign => Stmt::Assign(<>),
    Expr => Stmt::Expr(<>),
};

NoSemiStmt: Stmt = {
    CtrlIf => Stmt::CtrlIf(<>),
    CtrlFor => Stmt::CtrlFor(<>),
};

pub Return: Return = {
    "return" <Expr?> => Return(<>),
};

pub Let: Let = {
    "let" <id:"ident"> "=" <expr:Expr> => Let {
        id,
        expr,
    },
};

pub Assign: Assign = {
    <id:"ident"> <op:AssignOp> <expr:Expr> => Assign {
        id,
        op,
        expr,
    },
};

pub AssignOp: AssignOp = {
    "=" => AssignOp::Assign,
    "+=" => AssignOp::Add,
    "-=" => AssignOp::Sub,
    "*=" => AssignOp::Mul,
    "/=" => AssignOp::Div,
    "%=" => AssignOp::Mod,
};

pub CtrlIf: CtrlIf = {
    "if" <cnd:Expr> <block:Block> => CtrlIf {
        condition: Box::new(cnd),
        block,
    },
};

pub CtrlFor: CtrlFor = {
    "for" <id:"ident"> "in" <range:Range> <block:Block> => CtrlFor {
        id,
        range,
        block,
    },
};

pub Range: Range = {
    <from:Expr> <kind:RangeKind> <to:Expr> => Range {
        range: Box::new((from, to)),
        kind,
    },
};

pub RangeKind: RangeKind = {
    ".." => RangeKind::Open,
    "..=" => RangeKind::Closed,
};

pub Expr: Expr = {
    #[precedence(level = "1")]
    Term,

    #[precedence(level = "2")]
    #[assoc(side = "left")]
    <lhs:Expr> <op:ProdOp> <rhs:Expr> => Expr::BinExpr {
        sides: Box::new((lhs, rhs)),
        op,
    },

    #[precedence(level = "3")]
    #[assoc(side = "left")]
    <lhs:Expr> <op:TermOp> <rhs:Expr> => Expr::BinExpr {
        sides: Box::new((lhs, rhs)),
        op,
    },

    #[precedence(level = "4")]
    #[assoc(side = "right")]
    FnCall => Expr::FnCall(<>),

    #[precedence(level = "5")]
    #[assoc(side = "left")]
    <lhs:Expr> <op:CmpOp> <rhs:Expr> => Expr::BinExpr {
        sides: Box::new((lhs, rhs)),
        op,
    },
};

ProdOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
    "%" => BinOp::Mod,
};

TermOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};

CmpOp: BinOp = {
    "<" => BinOp::Lt,
    "<=" => BinOp::Le,
    "==" => BinOp::Eq,
    ">=" => BinOp::Ge,
    ">" => BinOp::Gt,
};

pub Term: Expr = {
    Value => Expr::Value(<>),
    "ident" => Expr::Variable(<>),
    "(" <Expr> ")",
};

pub Value: Value = {
    "lit_int" => Value::Int(<>),
    "lit_float" => Value::Float(<>),
    "lit_bool" => Value::Bool(<>),
};

pub FnCall: FnCall = {
    // <id:Expr> "(" <ArgList> ")" => FnCall {
    <id:"ident"> "(" <args:ArgList> ")" => FnCall {
        id,
        args,
    },
};

pub ArgList: ArgList = {
    Separated<Expr, ","> => ArgList(<>),
};

Separated<T, S>: Vec<T> = {
    <mut list: (<T> S)*> <last:T?> => match last {
        None => list,
        Some(last) => {
            list.push(last);
            list
        }
    },
};
