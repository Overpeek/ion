use crate::syntax::{*, lexer::Token};

//

grammar<'err>(errors: &'err mut Vec<String>);

extern {
    type Location = usize;
    type Error = String;
    
    enum Token {
        "fn" => Token::KeywordFn,
        "let" => Token::KeywordLet,
        "return" => Token::KeywordReturn,
        "i32" => Token::KeywordInt,
        "f32" => Token::KeywordFloat,
        "none" => Token::KeywordNone,

        "ident" => Token::Ident(<arcstr::Substr>),
        "int" => Token::Int(<i64>),
        "str" => Token::Str(<arcstr::Substr>),

        "(" => Token::Lparen,
        ")" => Token::Rparen,
        "{" => Token::Lbrace,
        "}" => Token::Rbrace,
        "[" => Token::Lbracket,
        "]" => Token::Rbracket,
        "," => Token::Comma,
        ";" => Token::Semi,
        ":" => Token::Colon,

        "+" => Token::OpAdd,
        "-" => Token::OpSub,
        "*" => Token::OpMul,
        "/" => Token::OpDiv,

        "=" => Token::Assign,
        "+=" => Token::AddAssign,
        "-=" => Token::SubAssign,
        "*=" => Token::MulAssign,
        "/=" => Token::DivAssign,
    }
}

//

pub Module: Module = {
    ";"* <items: (<Item> ";"+)*> => Module {
        src_files: vec![],
        items
    },
};

pub Item: Item = {
    FnDef => Item::FnDef(<>),
};

pub FnDef: FnDef = {
    <proto:FnProto> <block:Block> => FnDef {
        proto,
        block,
    },
};

pub FnProto: FnProto = {
    "fn" <id:"ident"> "(" <params:ParamList> ")" <ty: (":" <Type>)> => FnProto {
        id,
        params,
        ty,
    },
};

pub ParamList: ParamList = {
    Separated<Param, ","> => ParamList(<>),
};

pub Param: Param = {
    <id:"ident"> <ty: (":" <Type>)> => Param {
        id,
        ty,
    },
};

pub Type: Type = {
    "i32" => Type::I32,
    "f32" => Type::F32,
    "none" => Type::None,
};

pub Block: Block = {
    "{" <Chunk> "}",
};

pub Chunk: Block = {
    ";"* <stmts: (<Stmt> ";"+)*> => Block {
        stmts
    }
};

pub Stmt: Stmt = {
    Return => Stmt::Return(<>),
    Let => Stmt::Let(<>),
    Assign => Stmt::Assign(<>),
    FnCall => Stmt::FnCall(<>),
    // Expr => Stmt::Expr(<>),
};

pub Return: Return = {
    "return" <Expr?> => Return(<>),
};

pub Let: Let = {
    "let" <id:"ident"> "=" <expr:Expr> => Let {
        id,
        expr,
    },
};

pub Assign: Assign = {
    <id:"ident"> <op:AssignOp> <expr:Expr> => Assign {
        id,
        op,
        expr,
    },
};

pub AssignOp: AssignOp = {
    "=" => AssignOp::Assign,
    "+=" => AssignOp::Add,
    "-=" => AssignOp::Sub,
    "*=" => AssignOp::Mul,
    "/=" => AssignOp::Div,
};

pub Expr: Expr = {
    #[precedence(level = "1")]
    Term,

    #[precedence(level = "2")]
    #[assoc(side = "left")]
    <lhs:Expr> "/" <rhs:Expr> => Expr::BinExpr {
        sides: Box::new((lhs, rhs)),
        op: BinOp::Div,
    },
    <lhs:Expr> "*" <rhs:Expr> => Expr::BinExpr {
        sides: Box::new((lhs, rhs)),
        op: BinOp::Mul,
    },

    #[precedence(level = "3")]
    #[assoc(side = "left")]
    <lhs:Expr> "-" <rhs:Expr> => Expr::BinExpr {
        sides: Box::new((lhs, rhs)),
        op: BinOp::Sub,
    },
    <lhs:Expr> "+" <rhs:Expr> => Expr::BinExpr {
        sides: Box::new((lhs, rhs)),
        op: BinOp::Add,
    },

    #[precedence(level = "4")]
    #[assoc(side = "left")]
    FnCall => Expr::FnCall(<>),
};

pub Term: Expr = {
    Value => Expr::Value(<>),
    "ident" => Expr::Variable(<>),
    "(" <Expr> ")",
};

pub Value: Value = {
    "int" => Value::Int(<>),
};

pub FnCall: FnCall = {
    // <id:Expr> "(" <ArgList> ")" => FnCall {
    <id:"ident"> "(" <args:ArgList> ")" => FnCall {
        id,
        args,
    },
};

pub ArgList: ArgList = {
    Separated<Expr, ","> => ArgList(<>),
};

Separated<T, S>: Vec<T> = {
    <mut list: (<T> S)*> <last:T?> => match last {
        None => list,
        Some(last) => {
            list.push(last);
            list
        }
    },
};
